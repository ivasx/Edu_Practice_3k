import sqlite3

class Book:
    def __init__(self, inventory_number, author, title, page_count, year_published):
        self.inventory_number = inventory_number
        self.author = author
        self.title = title
        self.page_count = page_count
        self.year_published = year_published

    def __str__(self):
        return (f"{self.inventory_number} | "
                f"{self.author} | "
                f"{self.title} | "
                f"{self.page_count} —Å—Ç–æ—Ä. | "
                f"{self.year_published} —Ä.")

conn = sqlite3.connect('books.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        inventory_number TEXT PRIMARY KEY,
        author TEXT,
        title TEXT,
        page_count INTEGER,
        year_published INTEGER
        )
    ''')

conn.commit()

def add_book(book):
    try:
        cursor.execute('''
            INSERT INTO books (inventory_number, author, title, page_count, year_published)
            VALUES (?, ?, ?, ?, ?)
            ''', (book.inventory_number, book.author, book.title, book.page_count, book.year_published))
        conn.commit()
        print(f'–ö–Ω–∏–≥–∞ {book.title} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.')
    except sqlite3.IntegrityError:
        print('–ö–Ω–∏–≥—É –Ω–µ –¥–æ–¥–∞–Ω–æ. –ö–Ω–∏–≥–∞ –∑ —Ç–∞–∫–∏–º —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.')
    except Exception as error:
        print(f'–ö–Ω–∏–≥—É –Ω–µ –¥–æ–¥–∞–Ω–æ. –ü–æ–º–∏–ª–∫–∞: {error}')

def search_book_by_author(author):
    try:
        cursor.execute('SELECT * FROM books WHERE LOWER(author) = LOWER(?)', (author,))
        result = cursor.fetchall()
        if not result:
            print('–ö–Ω–∏–≥ –∑–∞ —Ç–∞–∫–∏–º –∞–≤—Ç–æ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            return []
        return [Book(*row) for row in result]
    except Exception as error:
        print(f'–ö–Ω–∏–≥—É –∑–∞ —Ç–∞–∫–∏–º –∞–≤—Ç–æ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–º–∏–ª–∫–∞: {error}')
        return []

def sort_books_by_year(reverse=False):
    try:
        if reverse:
            cursor.execute('SELECT * FROM books ORDER BY year_published DESC')
        else:
            cursor.execute('SELECT * FROM books ORDER BY year_published')
        result = cursor.fetchall()
        return [Book(*row) for row in result]
    except Exception as error:
        print(f'–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–º–∏–ª–∫–∞: {error}')
        return []

if __name__ == '__main__':
    # –î–æ–¥–∞—î–º–æ –∫–Ω–∏–≥–∏
    add_book(Book('NL1.11111111', '–õ—ñ –ë–∞—Ä–¥—É“ë–æ', '–®—ñ—Å—Ç–∫–∞ –≤–æ—Ä–æ–Ω—ñ–≤', 480, 2015))
    add_book(Book('NL1.12112112', '–ê–≥–∞—Ç–∞ –ö—Ä—ñ—Å—Ç—ñ', '–í–±–∏–≤—Å—Ç–≤–æ —É "–°—Ö—ñ–¥–Ω–æ–º—É –µ–∫—Å–ø—Ä–µ—Å—ñ"', 256, 1934))
    add_book(Book('NL1.11312111', '–î–∂–µ–Ω—ñ—Ñ–µ—Ä –ê—Ä–º–µ–Ω—Ç—Ä–∞—É—Ç', '–Ü–∑ –∫—Ä–æ–≤—ñ –π –ø–æ–ø–µ–ª—É', 636, 2020))
    add_book(Book('NL1.11111121', '–û—Ä–µ—Å—Ç –°—É–±—Ç–µ–ª—å–Ω–∏–π', '–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏', 720, 1991))
    add_book(Book('NL1.11984111', '–î–∂–æ—Ä–¥–∂ –û—Ä–≤–µ–ª–ª', '1984', 328, 1949))
    add_book(Book('NL1.12112118', '–ê–≥–∞—Ç–∞ –ö—Ä—ñ—Å—Ç—ñ', '–í–±–∏–≤—Å—Ç–≤–æ –∑–∞ –∞–±–µ—Ç–∫–æ—é', 320, 1936))
    add_book(Book('NL1.12112119', '–ê–≥–∞—Ç–∞ –ö—Ä—ñ—Å—Ç—ñ', '–ù—ñ–º–∏–π —Å–≤—ñ–¥–æ–∫', 304, 1937))
    add_book(Book('NL1.11141351', '–õ—ñ–ª–µ—Ç –ù–æ–Ω—ñ', '–¢—é—Ä–µ–º–Ω–∞ —Ü—ñ–ª–∏—Ç–µ–ª—å–∫–∞', 416, 2022))

    print('\nüîç –ü–æ—à—É–∫: –∫–Ω–∏–≥–∏ –ê–≥–∞—Ç–∏ –ö—Ä—ñ—Å—Ç—ñ')
    for b in search_book_by_author('–ê–≥–∞—Ç–∞ –ö—Ä—ñ—Å—Ç—ñ'):
        print(b)

    print('\nüìö –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —Ä–æ–∫–æ–º –≤–∏–¥–∞–Ω–Ω—è:')
    for b in sort_books_by_year(True):
        print(b)

    conn.close()